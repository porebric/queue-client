// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	nats_go "github.com/nats-io/nats.go"
)

// Conn is an autogenerated mock type for the Conn type
type Conn struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Conn) Close() {
	_m.Called()
}

// Publish provides a mock function with given fields: subj, data
func (_m *Conn) Publish(subj string, data []byte) error {
	ret := _m.Called(subj, data)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(subj, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestWithContext provides a mock function with given fields: ctx, subj, data
func (_m *Conn) RequestWithContext(ctx context.Context, subj string, data []byte) (*nats_go.Msg, error) {
	ret := _m.Called(ctx, subj, data)

	if len(ret) == 0 {
		panic("no return value specified for RequestWithContext")
	}

	var r0 *nats_go.Msg
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (*nats_go.Msg, error)); ok {
		return rf(ctx, subj, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) *nats_go.Msg); ok {
		r0 = rf(ctx, subj, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats_go.Msg)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, subj, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConn creates a new instance of Conn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *Conn {
	mock := &Conn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
